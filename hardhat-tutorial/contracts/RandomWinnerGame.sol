// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@chainlink/contracts/src/v0.8/VRFConsumerBase.sol";

contract RandomWinnerGame is VRFConsumerBase, Ownable {
    // chainlink variables
    // thiss is the amount of LINK to be sent with the request
    uint256 public fee;
    // the public key we are using to generate randomness
    bytes32 public keyHash;

    // array of addressess of the players
    address[] public players;
    // maxNumber of players to play in a game per time
    uint8 maxPlayers;
    // variable to indicate if the game has started or not
    bool public gameStarted;
    // the fees for entering the game
    uint256 entryFee;
    // current gameId
    uint256 public gameId;

    // events

    // emmits an event when game starts
    event GameStarted(uint256 gameId, uint8 maxPlayers, uint256 entryFee);
    // emmit an event when a player joins the game
    event PlayerJoined(uint256 gameId, address player);
    // emmit an event at the end of a game
    event GameEnded(uint256 gameId, address winner, bytes32 requestId);

    /**
     * the constructor inherits a VRFConsumerBase and initializes the values for keyHash, fee and ameStarted
     * @param vrfCoordinator  is the address of the VRFCoordinator contract
     * @param linkToken is the address of the LINK token contract
     * @param vrfFee is the amount of LINK sent when a request is made
     * @param vrfKeyHash is the ID of the public ey against which randomness is generated
     */
    constructor(
        address vrfCoordinator,
        address linkToken,
        bytes32 vrfKeyHash,
        uint256 vrfFee
    ) VRFConsumerBase(vrfCoordinator, linkToken) {
        keyHash = vrfKeyHash;
        fee = vrfFee;
        gameStarted = false;
    }

    /**
     * startGame: start the game and set the various variables required to player the game
     * _maxPlayers-involved in the game, _entryFee-the amount of LINK required to play the game
     */
    function startGame(uint8 _maxPlayers, uint256 _entryFee) public onlyOwner {
        // check if the game is already running
        require(!gameStarted, "Game is currently running");
        // clear the player array
        delete players;
        // set the maxNumber of players for the game
        maxPlayers = _maxPlayers;
        // set gameStarted to true
        gameStarted = true;
        // set the entryPrice for the game
        entryFee = _entryFee;
        // increament gameId
        gameId += 1;
        // emmit the event that game has started
        emit GameStarted(gameId, maxPlayers, entryFee);
    }

    /**
     * joinGame: this is the function a player calls when joing the game
     */
    function joinGame() public payable {
        // check if game has started
        require(gameStarted, "Game has not started yet");
        // check if the value sent by the user is equal to the entryFee
        require(msg.value == entryFee, "Value sent is not equal to entryFee");
        // check if the max number of players has been reached
        require(players.length < maxPlayers, "Game is full");
        // add the player to the list of players
        players.push(msg.sender);
        // emit an event to show that the player has joined the game
        emit PlayerJoined(gameId, msg.sender);

        // check if the required number of players have been reached, get a winner
        if (players.length == maxPlayers) {
            getRandomWinner();
        }
    }

    /**
     * by default, fulfillRandomness is called by the VRFCoordinator when a valid VRF proof is recieved
     * but we would override it to instead get called when the random number is generated by the Chainlink VRF
     * @param requestId is the unique id of the request sent to the VRF Coordinator
     * @param randomness is the random uint256 that gets generated by the VRF Coordinator
     */

    function fulfillRandomness(
        bytes32 requestId,
        uint256 randomness
    ) internal virtual override {
        // we want our winnerIndex to fall between 0 and players.length-1,
        // so we mode the randomness by the number of players in the game to get the winnerIndex
        uint256 winnerIndex = randomness % players.length;
        // the address the wins the game
        address winner = players[winnerIndex];
        // send all the ether in the contract to the winner
        (bool sent, ) = winner.call{value: address(this).balance}("");
        // chech if transfer is successfull
        require(sent, "Failed to send Ether");
        // annouce winner
        emit GameEnded(gameId, winner, requestId);
        // set gameStarted to false since game has ended
        gameStarted = false;
    }

    /**
     * getRandomWinner runs to produce a random winner for the game
     */
    function getRandomWinner() private returns (bytes32 requestId) {
        /**
         * We check to see if the address sending the request for
         * randomness to the VRF Coordinator has enough link for
         * the transaction using the LINK interface.
         * LINK is an internal interface for the Link Token which
         * is found in the VRFCosumerBase contract
         */

        require(LINK.balanceOf(address(this)) >= fee, "Not enough LINK");

        // RequestRandomenss is a function in the VRFConsumerBase
        // which starts the process of random number generation.
        // the request is sent to the VRFCoordinator for randomness.
        return requestRandomness(keyHash, fee);
    }

    // this finction recieves ether when the msg.data is empty
    receive() external payable {}

    // this finction recieves ether when the msg.data is not empty
    fallback() external payable {}
}
